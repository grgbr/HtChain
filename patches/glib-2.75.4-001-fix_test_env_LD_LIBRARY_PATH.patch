# 2 test remove LD_LIBRARY_PATH from env before run subprocess.
# We need keep LD_LIBRARY_PATH for final check.
--- a/gio/tests/gsubprocess.c	2023-03-03 12:15:47.000000000 +0100
+++ b/gio/tests/gsubprocess.c	2023-05-04 12:31:21.260877370 +0200
@@ -1397,22 +1397,24 @@
   GPtrArray *args;
   GInputStream *stdout_stream;
   gchar *result;
-  gchar *envp[] = { NULL, "ONE=1", "TWO=1", "THREE=3", "FOUR=1", NULL };
+  gchar *envp[] = { NULL, NULL, "ONE=1", "TWO=1", "THREE=3", "FOUR=1", NULL };
   gchar **split;
 
   envp[0] = g_strdup_printf ("PATH=%s", g_getenv ("PATH"));
+  envp[1] = g_strdup_printf ("LD_LIBRARY_PATH=%s", g_getenv ("LD_LIBRARY_PATH"));
   args = get_test_subprocess_args ("env", NULL);
   launcher = g_subprocess_launcher_new (G_SUBPROCESS_FLAGS_NONE);
   g_subprocess_launcher_set_flags (launcher, G_SUBPROCESS_FLAGS_STDOUT_PIPE);
   g_subprocess_launcher_set_environ (launcher, envp);
   g_subprocess_launcher_setenv (launcher, "TWO", "2", TRUE);
   g_subprocess_launcher_setenv (launcher, "THREE", "1", FALSE);
   g_subprocess_launcher_unsetenv (launcher, "FOUR");
 
   g_assert_null (g_subprocess_launcher_getenv (launcher, "FOUR"));
    
   proc = g_subprocess_launcher_spawn (launcher, error, args->pdata[0], "env", NULL);
   g_ptr_array_free (args, TRUE);
   g_assert_no_error (local_error);
   g_free (envp[0]);
+  g_free (envp[1]);
 
   stdout_stream = g_subprocess_get_stdout_pipe (proc);
--- a/gio/tests/gschema-compile.c	2023-03-03 12:15:47.000000000 +0100
+++ b/gio/tests/gschema-compile.c	2023-05-04 12:36:53.673385502 +0200
@@ -25,10 +25,12 @@
     test->opt,
     NULL
   };
-  gchar *envp[] = { NULL };
+  gchar *envp[] = { NULL, NULL };
+  envp[0] = g_strdup_printf ("LD_LIBRARY_PATH=%s", g_getenv ("LD_LIBRARY_PATH"));
 
   execve (argv[0], (char **) argv, envp);
   g_assert_not_reached ();
+  g_free (envp[0]);
 }
 
 static void
